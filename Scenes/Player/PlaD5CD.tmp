[gd_scene load_steps=14 format=3 uid="uid://c5fks4vtbjwe2"]

[ext_resource type="PackedScene" uid="uid://du8vicf3gndvh" path="res://health_container.tscn" id="1_786mj"]
[ext_resource type="Shader" path="res://Player/test.gdshader" id="1_o73vy"]

[sub_resource type="GDScript" id="GDScript_jpimw"]
script/source = "# Player Attributes and Initialization
var speed
var paused = false
var isSpectator = false
@export var WALK_SPEED = 5.0
@export var SPRINT_SPEED = 8.0
@export var JUMP_VELOCITY = 6
@export var MOUSE_SENSITIVITY = 0.003
@export var health: int = 6

# Bob variables
const BOB_FREQ = 2.4
const BOB_AMP = 0.08
var t_bob = 0.0

# FOV variables
const BASE_FOV = 75.0
const FOV_CHANGE = 2

# Get gravity from project settings to sync with RigidBody nodes
var gravity = 20

# Player Components
@onready var head = $Head
@onready var camera = $Head/Camera3D
@onready var raycast = $Head/Camera3D/RayCast3D
@onready var block_outline = $BlockOutline

# Initialize the tilt angle
var tilt_angle = 0.0

signal place_block(pos, t)
signal break_block(pos)

# Initialization
func _ready():
	Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
	HealthContainer.setMaxHearts(health)
	HealthContainer.updateHearts(1)

# Input Handling
func _unhandled_input(event):
	if Input.is_action_just_pressed(\"Pause\"):
		paused = not paused
		if paused:
			Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE)
		else:
			Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)

	if paused:
		return

	# Toggle Spectator Mode when the \"c\" key is pressed
	# if Input.is_action_just_pressed(\"Place\"):
	#     isSpectator = not isSpectator  # Toggle Spectator Mode

	if isSpectator:
		# Disable character control when in Spectator Mode
		head.set_process_input(true)
		head.set_physics_process(true)
		camera.set_process_input(true)
		camera.set_physics_process(true)
		gravity = 0
		set_collision_mask_value(0, false)
		$CollisionShape3D.disabled = true
	else:
		gravity = 20
		$CollisionShape3D.disabled = false

	if event is InputEventMouseMotion:
		head.rotate_y(-event.relative.x * MOUSE_SENSITIVITY)
		camera.rotate_x(-event.relative.y * MOUSE_SENSITIVITY)
		camera.rotation.x = clamp(camera.rotation.x, deg_to_rad(-90), deg_to_rad(90))

# Physics and Movement
func _physics_process(delta):
	if paused:  # Don't process movement when paused or in Spectator Mode
		return

	# Calculate the movement direction (normalized)
	var input_dir = Input.get_vector(\"Left\", \"Right\", \"Forward\", \"Backward\")
	var direction = (head.transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()

	# Calculate the angle of the movement vector
	var move_angle = atan2(direction.x, direction.z)

	# Add gravity
	if not is_on_floor():
		velocity.y -= gravity * delta

	# Handle Jump
	if Input.is_action_pressed(\"Jump\") and is_on_floor():
		velocity.y = JUMP_VELOCITY

	# Handle Sprint
	if Input.is_action_pressed(\"Sprint\"):
		speed = SPRINT_SPEED
	else:
		speed = WALK_SPEED

	if is_on_floor():
		if direction.length() > 0:
			velocity.x = direction.x * speed
			velocity.z = direction.z * speed
		else:
			velocity.x = lerp(velocity.x, 0.0, delta * 7.0)
			velocity.z = lerp(velocity.z, 0.0, delta * 7.0)
	else:
		velocity.x = lerp(velocity.x, direction.x * speed, delta * 3.0)
		velocity.z = lerp(velocity.z, direction.z * speed, delta * 3.0)

	# Head bob
	t_bob += delta * velocity.length() * float(is_on_floor())
	camera.transform.origin = _headbob(t_bob)

	# FOV
	var velocity_clamped = clamp(velocity.length(), 0.5, SPRINT_SPEED * 2)
	var target_fov = BASE_FOV + FOV_CHANGE * velocity_clamped
	camera.fov = lerp(camera.fov, target_fov, delta * 8.0)

	move_and_slide()

	if raycast.is_colliding():
		var norm = raycast.get_collision_normal()
		var pos = raycast.get_collision_point() - norm * 0.5

		var bx = floor(pos.x) + 0.5
		var by = floor(pos.y) + 0.5
		var bz = floor(pos.z) + 0.5
		var bpos = Vector3(bx, by, bz) - self.position

		block_outline.position = bpos
		block_outline.visible = true

		if Input.is_action_just_pressed(\"Break\"):
			emit_signal(\"break_block\", pos)
		if Input.is_action_just_pressed(\"Place\"):
			emit_signal(\"place_block\", pos + norm, Global.STONE)
	else:
		block_outline.visible = false

# Head Bobbing and FOV
func _headbob(time):
	var pos = Vector3.ZERO
	pos.y = sin(time * BOB_FREQ) * BOB_AMP
	pos.x = cos(time * BOB_FREQ / 2) * BOB_AMP
	return pos

# Health and Damage
func take_damage(amount):
	if health - amount >= 0:
		health -= amount
	elif health - amount <= 0:
		print(\"Player death\")
"

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_6e6bv"]
sky_horizon_color = Color(0.64625, 0.65575, 0.67075, 1)
ground_horizon_color = Color(0.64625, 0.65575, 0.67075, 1)

[sub_resource type="Sky" id="Sky_14sr6"]
sky_material = SubResource("ProceduralSkyMaterial_6e6bv")

[sub_resource type="Environment" id="Environment_4kngr"]
background_mode = 2
sky = SubResource("Sky_14sr6")
tonemap_mode = 2
glow_enabled = true

[sub_resource type="BoxMesh" id="BoxMesh_xm1fl"]

[sub_resource type="BoxShape3D" id="BoxShape3D_4yy4d"]

[sub_resource type="CameraAttributesPractical" id="CameraAttributesPractical_66hns"]

[sub_resource type="QuadMesh" id="QuadMesh_brkhn"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ur40g"]
render_priority = 0
shader = ExtResource("1_o73vy")
shader_parameter/shadows_enabled = true
shader_parameter/highlights_enabled = true
shader_parameter/shadow_strength = 0.4
shader_parameter/highlight_strength = 0.1
shader_parameter/highlight_color = Color(1, 1, 1, 1)
shader_parameter/shadow_color = Color(0, 0, 0, 1)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_8snqk"]
transparency = 1
albedo_color = Color(1, 1, 1, 0.0352941)

[sub_resource type="BoxMesh" id="BoxMesh_u8kbl"]
material = SubResource("StandardMaterial3D_8snqk")
size = Vector3(1.01, 1.01, 1.01)

[node name="Player" type="CharacterBody3D"]
script = SubResource("GDScript_jpimw")
MOUSE_SENSITIVITY = null
health = null

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_4kngr")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.866025, -0.498319, 0.0409693, 0, 0.0819385, 0.996637, -0.5, 0.863113, -0.0709608, 0, 0, 0)
shadow_enabled = true

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 1, 0)
mesh = SubResource("BoxMesh_xm1fl")
skeleton = NodePath("")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 1, 0)
shape = SubResource("BoxShape3D_4yy4d")

[node name="Head" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.75252, 0)

[node name="Camera3D" type="Camera3D" parent="Head"]
attributes = SubResource("CameraAttributesPractical_66hns")
current = true
fov = 80.0

[node name="RayCast3D" type="RayCast3D" parent="Head/Camera3D"]
target_position = Vector3(0, 0, -5)

[node name="MeshInstance3D" type="MeshInstance3D" parent="Head/Camera3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -0.247286)
mesh = SubResource("QuadMesh_brkhn")
surface_material_override/0 = SubResource("ShaderMaterial_ur40g")

[node name="BlockOutline" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.73597, -2.48096)
mesh = SubResource("BoxMesh_u8kbl")

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="HealthContainer" parent="CanvasLayer" instance=ExtResource("1_786mj")]
anchors_preset = 1
anchor_left = 1.0
anchor_top = 0.0
anchor_right = 1.0
anchor_bottom = 0.0
offset_top = 0.0
grow_horizontal = 0
grow_vertical = 1
